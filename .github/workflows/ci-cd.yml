name: 🤖 Airtable AI Agent CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ai-agent/**'
      - '.github/workflows/ai-agent.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'ai-agent/**'
  release:
    types: [published]

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: rashidazarang/airtable-ai-agent

jobs:
  # Quality checks
  quality:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          cd ai-agent
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: 🔍 Lint with flake8
        run: |
          cd ai-agent
          flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: 🎨 Format check with black
        run: |
          cd ai-agent
          black --check --diff src tests

      - name: 🏷️ Type check with mypy
        run: |
          cd ai-agent
          mypy src --ignore-missing-imports

      - name: 🔒 Security scan with bandit
        run: |
          cd ai-agent
          pip install bandit[toml]
          bandit -r src -f json -o bandit-report.json
        continue-on-error: true

      - name: 📤 Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-report
          path: ai-agent/bandit-report.json

  # Test suite
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_aiagent
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          cd ai-agent
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov pytest-mock

      - name: 🧪 Run tests with coverage
        env:
          REDIS_URL: redis://localhost:6379
          POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/test_aiagent
        run: |
          cd ai-agent
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-fail-under=80

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ai-agent/coverage.xml
          flags: aiagent
          name: AI Agent Coverage

  # Integration tests
  integration:
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🐳 Start MCP server
        run: |
          cd ../  # Go to root where airtable_simple.js is
          npm install
          AIRTABLE_TOKEN=${{ secrets.AIRTABLE_TOKEN }} AIRTABLE_BASE_ID=${{ secrets.AIRTABLE_BASE_ID }} node airtable_simple.js &
          sleep 10

      - name: 📦 Install AI agent dependencies
        run: |
          cd ai-agent
          pip install -r requirements.txt

      - name: 🔗 Test MCP integration
        env:
          MCP_SERVER_URL: http://localhost:8010/mcp
        run: |
          cd ai-agent
          python -m pytest tests/test_integration.py -v

  # Security scanning
  security:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'ai-agent/'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build Docker image
  build:
    runs-on: ubuntu-latest
    needs: [quality, test]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-metadata: ${{ steps.build.outputs.metadata }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ai-agent/
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Performance tests
  performance:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Compose
        run: |
          cd ai-agent
          docker-compose up -d --wait

      - name: 🏃 Run performance tests
        run: |
          cd ai-agent
          pip install locust
          locust -f tests/performance/locustfile.py --headless -u 10 -r 2 -t 60s --host http://localhost:8000

      - name: 📊 Collect performance metrics
        run: |
          cd ai-agent
          docker-compose logs > performance-logs.txt

      - name: 📤 Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            ai-agent/performance-logs.txt
            ai-agent/locust-report.html

      - name: 🧹 Cleanup
        if: always()
        run: |
          cd ai-agent
          docker-compose down -v

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, integration]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add staging deployment logic here

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, integration, security]
    if: github.event_name == 'release'
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add production deployment logic here

      - name: 📢 Create deployment notification
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'success',
              description: 'AI Agent deployed successfully',
              environment_url: 'https://airtable-ai-agent.example.com'
            });

  # Cleanup old images
  cleanup:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [deploy-production]
    steps:
      - name: 🧹 Delete old images
        uses: actions/github-script@v7
        with:
          script: |
            const response = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
              package_type: 'container',
              package_name: 'airtable-ai-agent',
              username: context.repo.owner
            });
            
            // Keep only the 10 most recent versions
            const versionsToDelete = response.data.slice(10);
            
            for (const version of versionsToDelete) {
              await github.rest.packages.deletePackageVersionForUser({
                package_type: 'container',
                package_name: 'airtable-ai-agent',
                username: context.repo.owner,
                package_version_id: version.id
              });
            }